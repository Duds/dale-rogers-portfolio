---
description:
globs:
alwaysApply: true
---
# Mandatory Project Rules

@context {
  "type": "documentation",
  "purpose": "project_rules",
  "format_version": "1.0.0",
  "enforced_for": "all contributors",
  "project": "Dale Rogers Portfolio"
}

## Project Directory Tree

```text
/ (root)
├── src/
│   ├── components/
│   │   ├── ui/
│   │   ├── layout/
│   │   ├── features/
│   │   └── sections/
│   ├── styles/
│   │   ├── components/
│   │   └── theme/
│   ├── content/
│   ├── layouts/
│   ├── pages/
│   ├── types/
│   ├── plugins/
│   └── scripts/
├── tests/
│   ├── ui/
│   ├── layout/
│   └── sections/
├── docs/
├── public/
├── .cursor/rules/
├── .github/
├── dist/
├── node_modules/
├── package.json
├── tailwind.config.ts
├── postcss.config.mjs
├── astro.config.mjs
└── ...
```

## Project Summary

- **Personal portfolio** for Dale Rogers, built with Astro, TypeScript, and modular CSS.
- Features: modular UI, dark/light theme, accessible, responsive, E2E tested, Australian standards.
- Content-driven, with case studies, articles, and service listings.

## Theme Principles

@rules [
  {
    "id": "token_based_styling",
    "severity": "error",
    "description": "Always use token-based styling for all colours, spacing, radii, and other design values. Do not use Tailwind's default colour-numbered classes (e.g. -500)."
  },
  {
    "id": "component_level_styles",
    "severity": "warning",
    "description": "Each component must import its own CSS, using theme tokens."
  },
  {
    "id": "accessible_contrast",
    "severity": "error",
    "description": "All theme choices must meet WCAG AA contrast."
  },
  {
    "id": "australian_standards",
    "severity": "warning",
    "description": "Date, currency, and spelling must follow en-AU conventions."
  }
]

## Test Principles

- **E2E-first**: Playwright is used for all UI/component/visual tests.
- **No direct unit tests for .astro**: Only integration/E2E/visual tests for Astro components.
- **Accessibility checks**: Automated a11y checks are included in E2E tests.
- **Visual regression**: Key components/pages have screenshot tests.
- **Test coverage**: All major UI and layout components are covered.

## Rules & When to Use

@rules [
  { "id": "component_organization", "severity": "error", "description": "For creating, moving, or refactoring components. Ensures correct directory, types, docs, and styles." },
  { "id": "development_standards", "severity": "error", "description": "For all code changes. Enforces TypeScript, documentation, accessibility, and Australian standards." },
  { "id": "theme_system", "severity": "error", "description": "For any theme or style changes. Use tokens, support both themes, and document changes." },
  { "id": "performance", "severity": "warning", "description": "For optimising code, assets, or build. Use lazy loading, memoisation, and efficient CSS." },
  { "id": "accessibility", "severity": "error", "description": "For any UI/UX changes. Follow WCAG, use semantic HTML, and test with screen readers." },
  { "id": "github_workflow", "severity": "error", "description": "For all git operations. Use feature branches, semantic commits, PRs, and code reviews." },
  { "id": "update_docs", "severity": "warning", "description": "Directly update all relevant documentation files (README, changelog, code comments, architecture docs, etc.) as part of your change. Do not just describe or suggest documentation updates—make the actual edits." },
  { "id": "content_changes", "severity": "warning", "description": "For updating content. Separate content from code/styling, and use content collections." },
  { "id": "content_collections", "severity": "warning", "description": "For managing structured content (case studies, articles, services). Use Astro content collections and types." },
  { "id": "layout_patterns", "severity": "warning", "description": "For layout changes. Use standard layout components and patterns." },
  { "id": "mdc", "severity": "info", "description": "For creating or editing .mdc rules files." }
]

## Usage Guidance

- **When adding or editing code**: Apply development-standards, component-organization, and theme-system.
- **When updating UI/UX**: Apply accessibility, performance, and layout-patterns.
- **When changing content**: Apply content-changes and content-collections.
- **When working with git**: Apply github-workflow.
- **When updating docs**: Apply update-docs.
- **When editing rules**: Apply mdc.

## Additional Guidance

- Always offer suggestions as a lettered list (a), b), c.), etc.).
- Always perform changes directly to the file, do not replay in chat and suggest user does it.

---

*This file is mandatory. All contributors must read and follow these rules for every change.*
