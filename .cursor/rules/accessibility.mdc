---
description: Standards for implementing accessibility across the site
globs:
alwaysApply: false
---
# Accessibility Standards

@context {
    "type": "guidelines",
    "purpose": "accessibility_standards",
    "format_version": "1.0.0"
}

@structure {
    "required_sections": [
        "semantic_html",
        "interactive_elements",
        "images_media",
        "forms"
    ]
}

## Core Requirements

1. **WCAG 2.1 Level AA Compliance**
   - Perceivable
   - Operable
   - Understandable
   - Robust

2. **Keyboard Navigation**
   ```typescript
   // ✅ Ensure interactive elements are focusable
   <button
     tabIndex={0}
     onKeyDown={(e) => {
       if (e.key === 'Enter' || e.key === ' ') {
         handleClick();
       }
     }}
   >
     Click me
   </button>
   ```

## Semantic HTML

1. **Document Structure**
   ```html
   <header role="banner">
     <nav role="navigation">
       <!-- Navigation content -->
     </nav>
   </header>

   <main role="main">
     <article>
       <h1>Main Content</h1>
       <!-- Article content -->
     </article>
   </main>

   <footer role="contentinfo">
     <!-- Footer content -->
   </footer>
   ```

2. **Headings Hierarchy**
   ```html
   <h1>Page Title</h1>
   <section>
     <h2>Section Title</h2>
     <article>
       <h3>Article Title</h3>
     </article>
   </section>
   ```

## ARIA Implementation

1. **Landmarks**
   ```html
   <div role="search">
     <label for="search">Search</label>
     <input
       id="search"
       type="search"
       aria-label="Search site content"
     />
   </div>
   ```

2. **Live Regions**
   ```html
   <div
     role="alert"
     aria-live="assertive"
     aria-atomic="true"
   >
     <!-- Dynamic content -->
   </div>
   ```

## Forms

1. **Labels and Instructions**
   ```html
   <div role="form">
     <label for="name">Full Name</label>
     <input
       id="name"
       type="text"
       aria-required="true"
       aria-describedby="name-help"
     />
     <span id="name-help">
       Enter your first and last name
     </span>
   </div>
   ```

2. **Error Handling**
   ```html
   <div role="form">
     <label for="email">Email</label>
     <input
       id="email"
       type="email"
       aria-invalid={hasError}
       aria-describedby="email-error"
     />
     {hasError && (
       <span
         id="email-error"
         role="alert"
       >
         Please enter a valid email address
       </span>
     )}
   </div>
   ```

## Images and Media

1. **Alternative Text**
   ```html
   <img
     src="logo.png"
     alt="Company Logo"
     role="img"
   />
   ```

2. **Decorative Images**
   ```html
   <img
     src="decoration.png"
     alt=""
     role="presentation"
   />
   ```

## Focus Management

1. **Focus Trapping**
   ```typescript
   function Modal({ isOpen, onClose }) {
     useEffect(() => {
       if (isOpen) {
         // Trap focus within modal
         const focusable = modalRef.current.querySelectorAll(
           'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
         );

         const firstFocusable = focusable[0];
         const lastFocusable = focusable[focusable.length - 1];

         // Handle tab key
         const handleTab = (e: KeyboardEvent) => {
           if (e.key === 'Tab') {
             if (e.shiftKey) {
               if (document.activeElement === firstFocusable) {
                 lastFocusable.focus();
                 e.preventDefault();
               }
             } else {
               if (document.activeElement === lastFocusable) {
                 firstFocusable.focus();
                 e.preventDefault();
               }
             }
           }
         };

         document.addEventListener('keydown', handleTab);
         return () => document.removeEventListener('keydown', handleTab);
       }
     }, [isOpen]);

     return (
       <div
         role="dialog"
         aria-modal="true"
         aria-labelledby="modal-title"
       >
         {/* Modal content */}
       </div>
     );
   }
   ```

## Colour and Contrast

1. **Contrast Ratios**
   ```css
   /* Ensure text meets WCAG AA standards */
   .text-normal {
     /* Normal text (4.5:1) */
     color: #595959;
     background-color: #ffffff;
   }

   .text-large {
     /* Large text (3:1) */
     color: #767676;
     background-color: #ffffff;
   }
   ```

2. **Colour Independence**
   ```html
   <button class="error-button">
     <span class="error-icon" aria-hidden="true">⚠️</span>
     <span class="error-text">Error: Invalid input</span>
   </button>
   ```

## Testing

1. **Automated Testing**
   ```typescript
   describe('Accessibility', () => {
     it('meets WCAG 2.1 AA standards', async () => {
       const { container } = render(<Component />);
       const results = await axe(container);
       expect(results).toHaveNoViolations();
     });
   });
   ```

2. **Manual Testing**
   - Screen reader testing
   - Keyboard navigation testing
   - High contrast mode testing
   - Zoom testing (up to 200%)

## Checklist

Before deployment:
- [ ] Semantic HTML used appropriately
- [ ] ARIA attributes implemented correctly
- [ ] Keyboard navigation working
- [ ] Focus management implemented
- [ ] Colour contrast meeting standards
- [ ] Error states accessible
- [ ] Images have appropriate alt text
- [ ] Forms properly labeled
- [ ] Automated tests passing
- [ ] Manual testing completed

## Common Issues

1. **Missing Labels**
   ```html
   <!-- ❌ Avoid -->
   <input type="text" placeholder="Enter name" />

   <!-- ✅ Use -->
   <label for="name">Name</label>
   <input
     id="name"
     type="text"
     aria-label="Enter your name"
   />
   ```

2. **Improper Heading Structure**
   ```html
   <!-- ❌ Avoid -->
   <h3>First Heading</h3>
   <h1>Main Heading</h1>

   <!-- ✅ Use -->
   <h1>Main Heading</h1>
   <h2>Subheading</h2>
   <h3>Section Heading</h3>
   ```

## Resources

1. **Testing Tools**
   - WAVE
   - axe-core
   - Lighthouse
   - NVDA
   - VoiceOver

2. **Guidelines**
   - WCAG 2.1
   - WAI-ARIA
   - Section 508

## Interactive Elements

@rules [
    {
        "id": "button_semantics",
        "rule": "Use semantic <button> for actions",
        "severity": "error"
    },
    {
        "id": "link_semantics",
        "rule": "Use <a> for navigation",
        "severity": "error"
    },
    {
        "id": "focus_states",
        "rule": "Implement focus states",
        "severity": "warning"
    }
]

### 1. Buttons and Links
- Use semantic `<button>` for actions
- Use `<a>` for navigation
- Implement focus states
- Ensure sufficient contrast

### 2. Implementation
```astro
<button
  class="btn-primary"
  aria-label="Submit form"
>
  Submit
</button>
```

## Images and Media

@rules [
    {
        "id": "alt_text",
        "rule": "Provide descriptive alt text",
        "severity": "error"
    },
    {
        "id": "decorative_images",
        "rule": "Use empty alt for decorative images",
        "severity": "warning"
    },
    {
        "id": "dimensions",
        "rule": "Specify image dimensions",
        "severity": "error"
    }
]

### 1. Alt Text
- Provide descriptive alt text
- Use empty alt for decorative images
- Consider context in descriptions
- Maintain consistency

### 2. Examples
```astro
<img
  src="logo.jpg"
  alt="Dale Rogers Portfolio Logo"
  width="200"
  height="100"
/>
```

## Forms

@rules [
    {
        "id": "form_labels",
        "rule": "Use proper form labels",
        "severity": "error"
    },
    {
        "id": "error_messages",
        "rule": "Implement error messages",
        "severity": "error"
    },
    {
        "id": "keyboard_navigation",
        "rule": "Ensure keyboard navigation",
        "severity": "error"
    }
]

### 1. Implementation
- Use proper form labels
- Implement error messages
- Provide clear instructions
- Ensure keyboard navigation

### 2. Example
```astro
<form>
  <label for="email">Email Address</label>
  <input
    type="email"
    id="email"
    name="email"
    aria-required="true"
  />
  <div class="error-message" role="alert">
    Please enter a valid
