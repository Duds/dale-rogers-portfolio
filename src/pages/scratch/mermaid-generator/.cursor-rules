---
description: Mermaid Generator project rules
globs: ["src/pages/scratch/mermaid-generator/**/*"]
alwaysApply: true
---

# Mermaid Generator Project Rules

## Development Standards

1. **Code Organization**

   - Keep components small and focused
   - Use shared core functionality
   - Follow the established directory structure
   - Maintain separation between Astro and standalone versions

2. **TypeScript Usage**

   - Use strict type checking
   - Define interfaces for all props
   - Use type guards for runtime checks
   - Avoid `any` types
   - Add proper JSDoc comments

3. **Error Handling**

   - Use the custom error handling system
   - Wrap async operations in error boundaries
   - Provide user-friendly error messages
   - Log errors appropriately
   - Handle edge cases

4. **Component Guidelines**

   - Use functional components
   - Implement proper prop types
   - Use client:load for interactive components
   - Follow Astro best practices
   - Keep styles scoped

5. **Testing Requirements**
   - Test core functionality
   - Test error handling
   - Test export features
   - Test responsive design
   - Test accessibility

## Git Workflow

1. **Branch Naming**

   - feature/\* for new features
   - fix/\* for bug fixes
   - docs/\* for documentation
   - refactor/\* for code refactoring

2. **Commit Messages**

   - Use semantic commit messages
   - Reference issue numbers
   - Keep messages concise
   - Use present tense

3. **Pull Requests**
   - Include description of changes
   - List testing performed
   - Mention reviewers
   - Link related issues

## Documentation

1. **Code Comments**

   - Document complex logic
   - Explain non-obvious decisions
   - Add TODO comments
   - Mark deprecated code

2. **README Updates**
   - Keep setup instructions current
   - Document new features
   - Update usage examples
   - List known issues

## Security

1. **Input Validation**

   - Validate Mermaid syntax
   - Sanitize user input
   - Check file types
   - Validate export options

2. **Output Sanitization**
   - Sanitize SVG output
   - Validate PNG exports
   - Check file downloads
   - Verify template saves

## Performance

1. **Optimization**

   - Minimize bundle size
   - Use efficient DOM updates
   - Implement proper caching
   - Optimize asset loading

2. **Monitoring**
   - Track error rates
   - Monitor performance
   - Check memory usage
   - Verify load times

## Accessibility

1. **Standards**

   - Follow WCAG 2.1
   - Use semantic HTML
   - Implement ARIA
   - Test with screen readers

2. **User Experience**
   - Provide keyboard shortcuts
   - Add focus indicators
   - Ensure color contrast
   - Support screen readers

## Build Process

1. **Development**

   - Use `pnpm dev` for local development
   - Run linter before commits
   - Check types before commits
   - Test changes locally

2. **Production**
   - Build standalone version with `--standalone`
   - Create zip with `--standalone --zip`
   - Verify all features work
   - Test in multiple browsers

## Maintenance

1. **Dependencies**

   - Keep dependencies updated
   - Check for security issues
   - Monitor bundle size
   - Review unused code

2. **Code Quality**
   - Run linter regularly
   - Fix warnings promptly
   - Maintain test coverage
   - Update documentation
