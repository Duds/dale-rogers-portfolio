---
import { getCollection, type CollectionEntry } from "astro:content";
import Container from "@/components/layout/Container.astro";
import { Code } from "astro:components";
import BaseLayout from "@/layouts/BaseLayout.astro";

// Add prerender directive to generate static pages
export const prerender = true;

// Define file type icons
const fileTypeIcons: Record<string, string> = {
  js: "📜",
  ts: "📘",
  jsx: "⚛️",
  tsx: "⚛️",
  html: "🌐",
  css: "🎨",
  scss: "🎨",
  md: "📝",
  mdx: "📝",
  markdown: "📝",
  json: "📋",
  py: "🐍",
};

export async function getStaticPaths() {
  const scratchProjects = await getCollection("scratch");
  return scratchProjects.map((entry) => {
    return {
      params: { slug: entry.slug },
      props: { entry },
    };
  });
}

interface Props {
  entry: CollectionEntry<"scratch">;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const formattedDate = new Date(entry.data.pubDate).toLocaleDateString("en-AU", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

type StatusType = "in-progress" | "complete" | "abandoned" | "draft";

const statusColors: Record<StatusType, string> = {
  "in-progress":
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
  complete: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  abandoned: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
  draft: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200",
};
---

<BaseLayout
  title={entry.data.title}
  description={entry.data.description}
  image={entry.data.coverImage}
>
  <Container class="py-20">
    <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <header class="mb-12">
        {
          entry.data.coverImage && (
            <div class="relative aspect-[16/9] rounded-2xl overflow-hidden mb-8">
              <img
                src={entry.data.coverImage}
                alt={entry.data.title}
                class="w-full h-full object-cover"
              />
            </div>
          )
        }

        <div class="flex items-center gap-4 mb-4">
          <time
            datetime={entry.data.pubDate.toISOString()}
            class="text-gray-500 dark:text-gray-400"
          >
            {formattedDate}
          </time>
          <span
            class={`px-3 py-1 rounded-full text-sm font-medium ${
              statusColors[entry.data.status as StatusType]
            }`}
          >
            {entry.data.status}
          </span>
        </div>

        <h1
          class="text-4xl md:text-6xl font-black text-gray-900 dark:text-white mb-6"
        >
          {entry.data.title}
        </h1>

        <p class="text-xl text-gray-600 dark:text-gray-400 mb-8">
          {entry.data.description}
        </p>

        <div class="flex flex-wrap gap-2 mb-8">
          {
            entry.data.tags.map((tag: string) => (
              <span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-full">
                {tag}
              </span>
            ))
          }
        </div>

        <div class="flex gap-4">
          {
            entry.data.githubUrl && (
              <a
                href={entry.data.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-primary-purple hover:text-white dark:hover:bg-primary-purple dark:hover:text-white transition-colors"
              >
                <svg
                  class="w-5 h-5"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                    clip-rule="evenodd"
                  />
                </svg>
                View on GitHub
              </a>
            )
          }

          {
            entry.data.liveUrl && (
              <a
                href={entry.data.liveUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-primary-purple hover:text-white dark:hover:bg-primary-purple dark:hover:text-white transition-colors"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                  />
                </svg>
                View Live Demo
              </a>
            )
          }
        </div>
      </header>

      <div class="prose dark:prose-invert max-w-none">
        <Content />
      </div>

      {
        entry.data.files && entry.data.files.length > 0 && (
          <div class="mt-12 border-t border-gray-200 dark:border-gray-800 pt-12">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
              Project Files
            </h2>
            <div class="space-y-6">
              {entry.data.files.map((file) => {
                // Get file language for Code component
                const lang =
                  file.type === "markdown" || file.type === "md"
                    ? "md"
                    : file.type;

                return (
                  <div class="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                    <div class="flex items-center gap-2 mb-2">
                      <span
                        role="img"
                        aria-label={`${file.type} file`}
                        class="text-xl"
                      >
                        {fileTypeIcons[file.type] || "📄"}
                      </span>
                      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                        {file.name}
                      </h3>
                    </div>
                    <div class="relative">
                      <Code code={file.content} lang={lang} />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )
      }
    </article>
  </Container>
</BaseLayout>
