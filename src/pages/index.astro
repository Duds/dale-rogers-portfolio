---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Hero from "@/components/features/home/components/Hero.astro";
import AboutSection from "@/components/features/about/components/AboutSection.astro";
import CaseStudiesBento from "@/components/features/case-studies/components/CaseStudiesBento.astro";
import FeaturedServicesSlider from "@/components/features/services/components/FeaturedServicesSlider.astro";
import Services from "@/components/features/home/components/Services.astro";
import ServicesText from "@/components/features/home/components/ServicesText.astro";
import MyValues from "@/components/features/values/components/MyValues.astro";
import PartnerLogos from "@/components/features/home/components/PartnerLogos.astro";

// Define interfaces based on your config.ts schemas
interface Logo {
  name: string;
  url: string;
  alt: string;
}

interface Value {
  name: string;
  description: string;
  icon: string;
}

interface HomeSectionContent {
  title?: string;
  subtitle?: string;
  ctaText?: string;
  paragraphs?: string[];
  image?: string;
  skills?: string[];
  values?: Value[];
  logos?: Logo[];
  [key: string]: unknown;
}

interface HomeSection {
  section: string;
  content: HomeSectionContent;
}

// Fetch content, rely on inference but check structure
const siteContent = await getCollection("site-content");
const homeEntry = siteContent.find(
  (entry) => entry.id === "home" // Use ID for data collections (filename)
);

// More robust check for data structure
if (
  !homeEntry?.data ||
  typeof homeEntry.data !== "object" ||
  !Array.isArray(homeEntry.data)
) {
  throw new Error(
    "Home content not found or invalid format: Expected an array"
  );
}

// Assert type after check - data is the array of sections
const homeSections = homeEntry.data as HomeSection[];

const heroContent = homeSections.find(
  (section) => section.section === "hero"
)?.content;
const aboutContent = homeSections.find(
  (section) => section.section === "about"
)?.content;
const servicesTextContent = homeSections.find(
  (section) => section.section === "services-text"
)?.content;
const valuesContent = homeSections.find(
  (section) => section.section === "values"
)?.content;

if (!heroContent || !aboutContent || !servicesTextContent || !valuesContent) {
  throw new Error("Required content sections not found");
}
---

<Layout title="Home">
  <Hero
    title={heroContent.title || ""}
    subtitle={heroContent.subtitle || ""}
    ctaText={heroContent.ctaText || ""}
  />
  <FeaturedServicesSlider />
  <AboutSection bio={aboutContent["paragraphs"]?.join("\n\n") || ""} />
  <CaseStudiesBento />
  <Services />
  <ServicesText content={servicesTextContent["paragraphs"] || []} />
  <MyValues />
  <PartnerLogos logos={valuesContent["logos"] || []} />
</Layout>
