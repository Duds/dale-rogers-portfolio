---
import { getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";
import Layout from "@/layouts/Layout.astro";
import Container from "@/components/layout/Container.astro";
import TagList from "@/components/ui/TagList.astro";
import FormattedDate from "@/components/ui/FormattedDate.astro";
import Icon from "@/components/ui/Icon.astro";
import CaseStudyCard from "@/components/features/case-studies/components/CaseStudyCard.astro";
import Heading from "@/components/ui/Heading.astro";

export const prerender = true;

export const getStaticPaths = (async () => {
  const serviceEntries = await getCollection("services");

  console.log(
    "Available service entries:",
    serviceEntries.map((entry) => entry.slug)
  );

  return serviceEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}) satisfies GetStaticPaths;

const { entry } = Astro.props;

// Check if entry exists before rendering
if (!entry) {
  console.error("Entry not found. Available entries:", Astro.params);
  return Astro.redirect("/");
}

const { Content } = await entry.render();

// Get related case studies if specified in the frontmatter
let relatedCaseStudies: any[] = [];
if (
  entry.data.relatedCaseStudies &&
  Array.isArray(entry.data.relatedCaseStudies) &&
  entry.data.relatedCaseStudies.length > 0
) {
  const allCaseStudies = await getCollection("case-studies");
  const caseStudySlugs = entry.data.relatedCaseStudies;
  relatedCaseStudies = allCaseStudies.filter((study) =>
    caseStudySlugs.includes(study.slug)
  );
}

const quickFacts = [
  {
    icon: "calendar",
    label: "Published",
    value: entry.data.pubDate,
    isDate: true,
  },
  { icon: "user", label: "Author", value: entry.data.author },
  { icon: "tag", label: "Type", value: entry.data.serviceType },
];

// Page metadata
const title = `${entry.data.title} | Dale Rogers`;
const description = entry.data.description;
---

<Layout title={title} description={description}>
  <main class="pt-0 pb-16">
    <!-- Hero Section -->
    <div class="px-4 sm:px-6 lg:px-8">
      <div class="relative w-full h-72 md:h-96 mb-8">
        <img
          src={entry.data.coverImage}
          alt=""
          class="w-full h-full object-cover object-center rounded-b-3xl"
          loading="eager"
        />
        <div
          class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent rounded-b-3xl"
        >
        </div>
        <div class="absolute bottom-0 left-0 p-6 md:p-12">
          <div class="flex items-center gap-4 mb-2">
            {
              entry.data.icon && (
                <Icon name={entry.data.icon} class="w-10 h-10 text-white" />
              )
            }
            <Heading level={1} class="text-white drop-shadow-lg">
              {entry.data.title}
            </Heading>
          </div>
          <p
            class="text-lg md:text-2xl text-white/90 font-body max-w-2xl drop-shadow"
          >
            {entry.data.description}
          </p>
        </div>
      </div>
    </div>
    <Container>
      <!-- Quick Facts -->
      <div
        class="flex flex-wrap gap-6 mb-10 justify-center md:justify-start text-lg"
      >
        {
          quickFacts.map((fact) => (
            <div class="flex items-center gap-2 bg-neutral-100 dark:bg-neutral-800 px-4 py-2 rounded-lg shadow-sm text-xl">
              <Icon name={fact.icon} class="w-6 h-6 text-primary" />
              <span class="font-semibold text-neutral-800 dark:text-neutral-200">
                {fact.label}:
              </span>
              <span class="text-neutral-700 dark:text-neutral-300">
                {fact.isDate ? <FormattedDate date={fact.value} /> : fact.value}
              </span>
            </div>
          ))
        }
        {entry.data.tags && <TagList tags={entry.data.tags} />}
      </div>
      <!-- Benefits -->
      {
        entry.data.benefits && (
          <div class="mb-12">
            <h2 class="text-3xl font-black font-heading mb-6">Key Benefits</h2>
            <ul class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {entry.data.benefits.map(
                (benefit: { text: string; icon: string }) => (
                  <li
                    class="flex items-start gap-3 border border-grey-200 dark:border-grey-700 rounded-xl p-4 shadow-sm text-xl"
                    style="background-color: var(--color-background-secondary);"
                  >
                    <Icon
                      name={benefit.icon}
                      class="w-7 h-7 text-secondary dark:text-secondary mt-1 shrink-0"
                    />
                    <span class="text-grey-800 dark:text-grey-200">
                      {benefit.text}
                    </span>
                  </li>
                )
              )}
            </ul>
          </div>
        )
      }
      <!-- Process Timeline -->
      {
        entry.data.process && (
          <div class="mb-12">
            <h2 class="text-3xl font-black font-heading mb-6">Our Process</h2>
            <ol class="relative border-l-2 border-primary/30 ml-4 list-none p-0">
              {entry.data.process.map(
                (step: { title: string; description: string }, idx: number) => (
                  <li class="mb-10 ml-8">
                    <span class="absolute -left-5 flex items-center justify-center w-10 h-10 bg-accent text-white rounded-full ring-4 ring-white dark:ring-grey-900 font-black text-xl">
                      {idx + 1}
                    </span>
                    <h3 class="text-2xl font-bold mb-1">{step.title}</h3>
                    <p class="text-grey-700 dark:text-grey-300 text-xl">
                      {step.description}
                    </p>
                  </li>
                )
              )}
            </ol>
          </div>
        )
      }
      <!-- Rich MDX Content -->
      <div
        class="prose prose-2xl dark:prose-invert max-w-none mb-16
               prose-headings:font-heading prose-headings:font-black
               prose-h2:mt-16 prose-h2:mb-8
               prose-h3:mt-12 prose-h3:mb-6
               prose-p:text-2xl prose-p:leading-relaxed prose-p:my-8
               prose-ul:leading-relaxed prose-ul:my-8 prose-ul:pl-10
               prose-li:my-3
               prose-a:text-primary hover:prose-a:text-primary/80 prose-a:no-underline hover:prose-a:underline"
      >
        <Content />
      </div>
      <!-- Related Case Studies -->
      {
        relatedCaseStudies.length > 0 && (
          <div class="mt-16">
            <h2 class="text-2xl font-bold font-heading mb-6">
              Related Case Studies
            </h2>
            <div class="grid gap-8 md:grid-cols-2">
              {relatedCaseStudies.map((study) => (
                <CaseStudyCard
                  title={study.data.title}
                  description={study.data.description}
                  client={study.data.client}
                  industry={study.data.industry}
                  duration={study.data.duration}
                  tags={study.data.tags}
                  href={`/work/${study.slug}`}
                  coverImage={study.data.coverImage}
                />
              ))}
            </div>
          </div>
        )
      }
      <!-- CTA -->
      <div
        class="mt-20 bg-primary/10 dark:bg-primary/20 p-8 md:p-12 rounded-2xl text-center shadow-lg"
      >
        <h2 class="text-3xl md:text-4xl font-bold font-heading mb-5">
          Interested in this service?
        </h2>
        <p class="text-xl md:text-2xl mb-8">
          Let's discuss how I can help with your specific needs.
        </p>
        <a
          href="/contact"
          class="inline-block px-10 py-4 bg-accent text-white font-bold rounded-full
                 hover-lift-shadow
                 text-xl md:text-2xl"
        >
          Get in Touch
        </a>
      </div>
    </Container>
  </main>
</Layout>
