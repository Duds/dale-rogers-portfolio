---
import Button from "@/components/ui/Button.astro";
import { Search } from 'lucide-astro';
import "@/styles/components/search-input.css";
---

<div class="search-bar-container">
  <form
    class="search-form"
    role="search"
    aria-label="Site search"
    autocomplete="off"
    id="search-form"
    action="/search"
    method="get"
  >
    <!-- Main search button with magnifying glass icon -->
    <Button
      type="button"
      id="search-toggle"
      variant="ghost"
      ghostColour="grey"
      aria-label="Toggle search"
      tabindex="0"
      class="search-toggle"
    >
      <Search class="search-icon w-6 h-6" />
    </Button>

    <!-- Search input that appears when the button is clicked -->
    <div class="search-input-container">
      <input
        type="text"
        placeholder="Search articles and case studies..."
        class="search-input"
        id="search-input"
        name="q"
        aria-label="Search"
        aria-expanded="false"
        aria-controls="search-results"
        role="combobox"
        autocomplete="off"
      />
    </div>
  </form>
  <div id="search-results" class="search-results hidden" role="listbox">
    <!-- Results will be populated here -->
  </div>
</div>

<script>
  import { useSearch } from "./hooks/useSearch.js";

  let searchInput: HTMLInputElement | null = null;
  let searchResults: HTMLDivElement | null = null;
  let searchToggle: HTMLButtonElement | null = null;
  let searchForm: HTMLFormElement | null = null;
  let searchInputContainer: HTMLDivElement | null = null;
  let expanded = false;

  function expandSearch() {
    console.log("Attempting to expand search", {
      searchForm: !!searchForm,
      searchInput: !!searchInput,
      searchInputContainer: !!searchInputContainer,
    });

    if (!searchForm || !searchInput || !searchInputContainer) {
      console.warn("Cannot expand search - missing elements");
      return;
    }

    expanded = true;
    searchForm.classList.add("expanded");
    searchInputContainer.classList.add("expanded");
    searchInput.focus();

    console.log("Search expanded successfully");
  }

  function collapseSearch() {
    console.log("Attempting to collapse search");

    if (
      !searchForm ||
      !searchInput ||
      !searchResults ||
      !searchInputContainer
    ) {
      console.warn("Cannot collapse search - missing elements");
      return;
    }

    expanded = false;
    searchForm.classList.remove("expanded");
    searchInputContainer.classList.remove("expanded");
    searchInput.value = "";
    searchResults.classList.add("hidden");
    searchInput.setAttribute("aria-expanded", "false");

    console.log("Search collapsed successfully");
  }

  function handleSearchToggle(e: Event) {
    e.preventDefault();

    if (!expanded) {
      expandSearch();
    } else if (searchInput && searchInput.value.trim() !== "") {
      // If expanded and has input, submit the form
      if (searchForm) {
        searchForm.submit();
      }
    } else {
      // If expanded but no input, collapse
      collapseSearch();
    }
  }

  function setupSearch() {
    // Reset search state when setting up
    expanded = false;

    // Get fresh references to DOM elements
    searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement | null;
    searchResults = document.getElementById(
      "search-results"
    ) as HTMLDivElement | null;
    searchToggle = document.getElementById(
      "search-toggle"
    ) as HTMLButtonElement | null;
    searchForm = document.getElementById(
      "search-form"
    ) as HTMLFormElement | null;

    // Try multiple ways to find the search input container
    searchInputContainer = document.querySelector(
      ".search-input-container"
    ) as HTMLDivElement | null;
    if (!searchInputContainer && searchForm) {
      // Fallback: look for the container within the form
      searchInputContainer = searchForm.querySelector(
        ".search-input-container"
      ) as HTMLDivElement | null;
    }

    // Debug logging
    console.log("Setting up search with elements:", {
      searchInput: !!searchInput,
      searchResults: !!searchResults,
      searchToggle: !!searchToggle,
      searchForm: !!searchForm,
      searchInputContainer: !!searchInputContainer,
    });

    if (searchToggle && searchInput && searchForm) {
      // Remove existing event listeners to prevent duplicates
      searchToggle.removeEventListener("click", handleSearchToggle);
      searchInput.removeEventListener("focus", expandSearch);

      // Add event listeners
      searchToggle.addEventListener("click", handleSearchToggle);
      searchInput.addEventListener("focus", expandSearch);

      // Handle Enter key in input field
      searchInput.removeEventListener("keydown", handleEnterKey);
      searchInput.addEventListener("keydown", handleEnterKey);

      // Setup search functionality
      if (searchInput && searchResults && searchForm) {
        const { handleSearch, handleKeyDown } = useSearch(
          searchInput,
          searchResults
        );

        // Remove existing listeners to prevent duplicates
        searchInput.removeEventListener("input", handleSearch);
        searchInput.removeEventListener("keydown", handleKeyDown);

        // Add fresh listeners
        searchInput.addEventListener("input", handleSearch);
        searchInput.addEventListener("keydown", handleKeyDown);
      }

      // Ensure search is collapsed initially
      if (searchForm.classList.contains("expanded")) {
        searchForm.classList.remove("expanded");
      }
      if (searchInputContainer?.classList.contains("expanded")) {
        searchInputContainer.classList.remove("expanded");
      }
      if (searchResults?.classList.contains("hidden") === false) {
        searchResults.classList.add("hidden");
      }

      console.log("Search setup complete");
    } else {
      console.warn("Some search elements not found:", {
        searchToggle: !!searchToggle,
        searchInput: !!searchInput,
        searchForm: !!searchForm,
      });
    }

    // Setup global event listeners
    setupGlobalListeners();
  }

  function handleEnterKey(e: KeyboardEvent) {
    if (e.key === "Enter") {
      // Allow normal form submission to the search page
      // We don't need to prevent default here
    }
  }

  function setupGlobalListeners() {
    // Remove existing global listeners to prevent duplicates
    document.removeEventListener("click", handleDocumentClick);
    document.removeEventListener("keydown", handleDocumentKeydown);

    // Add fresh global listeners
    document.addEventListener("click", handleDocumentClick);
    document.addEventListener("keydown", handleDocumentKeydown);
  }

  function handleDocumentClick(event: Event) {
    const target = event.target as Node | null;
    if (
      expanded &&
      target &&
      !searchForm?.contains(target) &&
      !searchResults?.contains(target)
    ) {
      collapseSearch();
    }
  }

  function handleDocumentKeydown(e: KeyboardEvent) {
    if (e.key === "Escape" && expanded) {
      collapseSearch();
    }
  }

  // Initialize on first load
  document.addEventListener("DOMContentLoaded", () => {
    // Small delay to ensure DOM is fully ready
    setTimeout(setupSearch, 10);
  });

  // Re-initialize after Astro page navigation
  document.addEventListener("astro:page-load", () => {
    // Small delay to ensure DOM is fully ready after navigation
    setTimeout(setupSearch, 10);
  });
  document.addEventListener("astro:after-swap", () => {
    // Small delay to ensure DOM is fully ready after swap
    setTimeout(setupSearch, 10);
  });
</script>
