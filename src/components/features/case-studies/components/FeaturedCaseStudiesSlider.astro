---
/**
 * FeaturedCaseStudiesSlider Component
 *
 * A horizontal slider component that smoothly translates based on scroll position.
 * Designed to showcase featured case studies on the landing page with a smooth,
 * engaging animation that responds to the user's scroll position. The slider starts
 * with the first card partially visible (50% off-screen) to indicate scrollability.
 *
 * @component
 * @example
 * ```astro
 * ---
 * import FeaturedCaseStudiesSlider from "@/components/features/case-studies/components/FeaturedCaseStudiesSlider.astro";
 * ---
 *
 * <FeaturedCaseStudiesSlider />
 * ```
 *
 * @accessibility
 * - Images include descriptive alt text
 * - Links are properly labelled
 * - Content remains accessible when JavaScript is disabled
 * - Maintains proper contrast ratios for text overlay
 *
 * @performance
 * - Uses RequestAnimationFrame for smooth animations
 * - Implements passive scroll listeners
 * - Uses pixel-based transforms for consistent rendering
 * - Includes proper cleanup and memory management
 * - Handles window resize and visibility changes
 * - Optimises initial render to prevent flickering
 * - Recalculates positions after images load
 *
 * @behaviour
 * - Starts with first card 50% off-screen to indicate scrollability
 * - Smoothly scrolls based on viewport position
 * - Adapts to different screen sizes
 * - Maintains consistent scroll behaviour across devices
 * - Cleans up event listeners and animation frames on unmount
 */

interface CaseStudy {
  title: string;
  coverImage: string;
  slug: string;
  description: string;
}

// Using Unsplash images that represent each case study theme
const featuredCaseStudies: CaseStudy[] = [
  {
    title: "Service Design for Health",
    coverImage:
      "https://images.unsplash.com/photo-1576091160550-2173dba999ef?auto=format&fit=crop&q=80",
    slug: "/case-studies/health-service",
    description:
      "Transforming healthcare delivery through human-centred design",
  },
  {
    title: "Digital Transformation",
    coverImage:
      "https://images.unsplash.com/photo-1451187580459-43490279c0fa?auto=format&fit=crop&q=80",
    slug: "/case-studies/digital-transform",
    description: "Modernising legacy systems with user-first approach",
  },
  {
    title: "Citizen Services Portal",
    coverImage:
      "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&q=80",
    slug: "/case-studies/citizen-portal",
    description: "Creating accessible digital services for all Australians",
  },
  {
    title: "Service Blueprint",
    coverImage:
      "https://images.unsplash.com/photo-1507537297725-24a1c029d3ca?auto=format&fit=crop&q=80",
    slug: "/case-studies/service-blueprint",
    description: "Mapping complex service ecosystems for better outcomes",
  },
  {
    title: "UX Research Study",
    coverImage:
      "https://images.unsplash.com/photo-1552664730-d307ca884978?auto=format&fit=crop&q=80",
    slug: "/case-studies/ux-research",
    description: "Deep dive into user needs and behaviours",
  },
  {
    title: "Service Integration",
    coverImage:
      "https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?auto=format&fit=crop&q=80",
    slug: "/case-studies/service-integration",
    description: "Connecting systems for seamless experiences",
  },
  {
    title: "Design System",
    coverImage:
      "https://images.unsplash.com/photo-1561070791-2526d30994b5?auto=format&fit=crop&q=80",
    slug: "/case-studies/design-system",
    description: "Building consistent user experiences at scale",
  },
  {
    title: "Accessibility Audit",
    coverImage:
      "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?auto=format&fit=crop&q=80",
    slug: "/case-studies/accessibility",
    description: "Ensuring digital inclusion for all users",
  },
];
---

<section
  class="featured-case-studies min-h-[60vh] md:min-h-[70vh] relative overflow-hidden py-16 w-full"
  id="featured-case-studies"
>
  <div class="slider-viewport w-full overflow-hidden">
    <div
      class="slider-container flex gap-4 md:gap-6 w-max transition-all duration-700 ease-out will-change-transform pl-4 md:pl-8"
    >
      {
        featuredCaseStudies.map((study: CaseStudy) => (
          <a
            href={study.slug}
            class="case-study-card w-[70vw] md:w-[35vw] lg:w-[25vw] h-[60vh] relative rounded-3xl overflow-hidden group flex-shrink-0 shadow-xl"
          >
            <img
              src={study.coverImage}
              alt={study.title}
              class="w-full h-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-105"
              loading="lazy"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
            <div class="absolute bottom-0 left-0 right-0 p-6">
              <h3 class="text-white text-xl md:text-2xl font-semibold mb-2">
                {study.title}
              </h3>
              <p class="text-white/80 text-base md:text-lg">
                {study.description}
              </p>
            </div>
          </a>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const section = document.querySelector(
      ".featured-case-studies"
    ) as HTMLElement;
    const sliderContainer = document.querySelector(
      ".slider-container"
    ) as HTMLElement;
    const sliderViewport = document.querySelector(
      ".slider-viewport"
    ) as HTMLElement;

    if (!section || !sliderContainer || !sliderViewport) {
      console.error("Required slider elements not found");
      return;
    }

    // Initialize variables
    let maxScroll = 0;
    let ticking = false;
    let animationFrameId: number | null = null;

    // Initial offset for the slider (50% of first card)
    const getInitialOffset = () => {
      // Get initial card width
      const firstCard = sliderContainer.querySelector(".case-study-card");
      if (!firstCard) return -35;

      const cardWidth = firstCard.getBoundingClientRect().width;
      return -(cardWidth / 2);
    };

    // Calculate how far we can scroll horizontally
    function updateMaxScroll() {
      maxScroll = sliderContainer.scrollWidth - sliderViewport.clientWidth;
      console.log("Max scroll updated:", maxScroll);
    }

    // Set initial transform immediately to avoid flicker
    sliderContainer.style.transform = `translateX(${getInitialOffset()}px)`;

    // Debounced resize handler
    let resizeTimeout: number | null = null;
    window.addEventListener("resize", () => {
      if (resizeTimeout) {
        window.clearTimeout(resizeTimeout);
      }
      resizeTimeout = window.setTimeout(() => {
        updateMaxScroll();
        updateSliderPosition();
      }, 100);
    });

    // Calculate initial values after a short delay to ensure layout is complete
    setTimeout(() => {
      updateMaxScroll();
      updateSliderPosition();
    }, 100);

    // Smooth progress calculation
    function calculateProgress(rect: DOMRect): number {
      const viewportHeight = window.innerHeight;
      const totalDistance = rect.height + viewportHeight;
      const distanceFromTop = viewportHeight - rect.top;
      const rawProgress = distanceFromTop / totalDistance;
      return Math.max(0, Math.min(1, rawProgress));
    }

    // Handle scroll event with RAF
    function updateSliderPosition() {
      if (!ticking) {
        animationFrameId = requestAnimationFrame(() => {
          const rect = section.getBoundingClientRect();
          const progress = calculateProgress(rect);

          // Use initial offset in pixels and remaining scroll in pixels too
          const offset = getInitialOffset() - progress * maxScroll;

          // Use transform with px units for consistency
          sliderContainer.style.transform = `translateX(${offset}px)`;
          ticking = false;
        });
        ticking = true;
      }
    }

    // Throttled scroll handler
    window.addEventListener(
      "scroll",
      () => {
        updateSliderPosition();
      },
      { passive: true }
    );

    // Initial position update
    updateSliderPosition();

    // Cleanup function
    function cleanup() {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      if (resizeTimeout) {
        window.clearTimeout(resizeTimeout);
      }
    }

    // Handle page visibility changes
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        cleanup();
      } else {
        updateMaxScroll();
        updateSliderPosition();
      }
    });

    // Recalculate after images load
    Promise.all(
      Array.from(section.getElementsByTagName("img")).map((img) => {
        if (img.complete) return Promise.resolve();
        return new Promise((resolve) => {
          img.addEventListener("load", resolve);
          img.addEventListener("error", resolve); // Handle error case as well
        });
      })
    ).then(() => {
      updateMaxScroll();
      updateSliderPosition();
    });
  });
</script>
