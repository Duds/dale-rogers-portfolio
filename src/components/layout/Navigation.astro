---
import ThemeToggle from "@/components/ui/ThemeToggle.astro";
import SearchInput from "@/components/features/search/SearchInput.astro";
import Container from "./Container.astro";

interface NavItem {
  label: string;
  href: string;
}

// Get current path and determine active page
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // Remove the leading "/"

// Navigation items
const navItems: NavItem[] = [
  { label: "Work", href: "/work" },
  { label: "Articles", href: "/articles" },
];

// Function to determine if a link is active
const isActive = (href: string): boolean => {
  if (href === "/") return pathname === "/";
  return currentPath.startsWith(href.slice(1));
};
---

<nav
  id="main-nav"
  class="fixed w-full top-0 z-50 transition-all duration-300 pt-4"
  role="navigation"
  aria-label="Main navigation"
>
  <Container fullWidth>
    <div class="bg-neutral-100 dark:bg-neutral-900 rounded-3xl py-4">
      <div class="flex items-center justify-between px-8 md:px-12">
        <!-- Left Section -->
        <a
          href="/"
          class="font-heading text-3xl md:text-4xl font-bold text-black dark:text-white hover:text-purple-500 dark:hover:text-purple-400 transition-colors"
          aria-label="Dale Rogers - Home"
        >
          Dale Rogers
        </a>

        <!-- Right Section -->
        <div class="hidden md:flex items-center gap-4">
          <div class="w-64">
            <SearchInput />
          </div>
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class:list={[
                  "font-heading text-xl md:text-2xl font-bold px-4 py-2 rounded-full",
                  "text-black dark:text-white border-2 border-black dark:border-white",
                  "hover:bg-black hover:text-white dark:hover:bg-white dark:hover:text-black",
                  "transition-all duration-300",
                  {
                    "bg-black text-white dark:bg-white dark:text-black":
                      isActive(item.href),
                  },
                ]}
              >
                {item.label}
              </a>
            ))
          }
          <ThemeToggle />
        </div>

        <!-- Mobile Menu Button -->
        <button
          class="md:hidden p-2 text-black dark:text-white hover:text-purple-500 dark:hover:text-purple-400 transition-colors"
          aria-label="Toggle menu"
          aria-expanded="false"
          aria-controls="navbar-menu"
        >
          <svg
            class="w-8 h-8"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </Container>

  <!-- Mobile Navigation -->
  <div
    id="navbar-menu"
    class="hidden md:hidden border-t border-black/10 dark:border-white/10 bg-neutral-100/95 dark:bg-neutral-900/95 backdrop-blur-sm"
    role="menu"
  >
    <Container fullWidth>
      <div class="space-y-4 px-8 md:px-12 py-4">
        <div class="w-full">
          <SearchInput />
        </div>
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class:list={[
                "block font-heading text-2xl font-bold px-4 py-2 rounded-full",
                "text-black dark:text-white border-2 border-black dark:border-white",
                "hover:bg-black hover:text-white dark:hover:bg-white dark:hover:text-black",
                "transition-all duration-300",
                {
                  "bg-black text-white dark:bg-white dark:text-black": isActive(
                    item.href
                  ),
                },
              ]}
              role="menuitem"
            >
              {item.label}
            </a>
          ))
        }
        <div class="py-2">
          <ThemeToggle />
        </div>
      </div>
    </Container>
  </div>
</nav>

<script>
  // Mobile menu toggle functionality
  const initMobileMenu = () => {
    const menuButton = document.querySelector(
      'button[aria-controls="navbar-menu"]'
    );
    const menu = document.getElementById("navbar-menu");
    const navbar = document.getElementById("main-nav");

    menuButton?.addEventListener("click", () => {
      const isExpanded = menuButton.getAttribute("aria-expanded") === "true";
      menuButton.setAttribute("aria-expanded", String(!isExpanded));
      menu?.classList.toggle("hidden");
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (!navbar?.contains(e.target as Node)) {
        menu?.classList.add("hidden");
        menuButton?.setAttribute("aria-expanded", "false");
      }
    });
  };

  // Scroll functionality
  const initScrollBehavior = () => {
    const navbar = document.getElementById("main-nav");
    if (!navbar) return;

    let lastScrollY = window.scrollY;
    const scrollThreshold = 50;

    const handleScroll = () => {
      const currentScrollY = window.scrollY;

      // Add backdrop when scrolled
      if (currentScrollY > 0) {
        navbar.classList.add("backdrop-blur-sm");
      } else {
        navbar.classList.remove("backdrop-blur-sm");
      }

      // Show nav at the top of the page
      if (currentScrollY < scrollThreshold) {
        navbar.style.transform = "translateY(0)";
        return;
      }

      // Hide nav when scrolling down, show when scrolling up
      if (currentScrollY > lastScrollY) {
        navbar.style.transform = "translateY(-100%)";
      } else {
        navbar.style.transform = "translateY(0)";
      }

      lastScrollY = currentScrollY;
    };

    // Throttle scroll events for better performance
    let ticking = false;
    window.addEventListener("scroll", () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });

    // Initial call to set initial state
    handleScroll();
  };

  // Initialize functionality
  document.addEventListener("astro:page-load", () => {
    initMobileMenu();
    initScrollBehavior();
  });
</script>
