---

---

<style>
  /* Base styles */
  .theme-toggle {
    @apply font-sans text-xl md:text-2xl font-bold border-2 border-black dark:border-white rounded-full transition-all duration-300;
    background-color: transparent;
    width: 48px;
    height: 48px;
    padding: 0;
    position: relative;
    overflow: hidden;
  }

  /* Icons container */
  .theme-icons {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* SVG styling */
  .theme-toggle svg {
    width: 24px;
    height: 24px;
    stroke: black !important;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition:
      opacity 0.2s ease,
      visibility 0.2s ease,
      transform 0.3s ease;
  }

  /* Dark mode SVG */
  html.dark .theme-toggle svg {
    stroke: white !important;
  }

  /* Hover styles - light mode */
  .theme-toggle:hover {
    background-color: black !important;
  }

  /* Hover SVG color - light mode */
  .theme-toggle:hover svg {
    stroke: white !important;
  }

  /* Hover styles - dark mode */
  html.dark .theme-toggle:hover {
    background-color: white !important;
  }

  /* Hover SVG color - dark mode */
  html.dark .theme-toggle:hover svg {
    stroke: black !important;
  }

  /* Theme icon visibility */
  .sun-icon {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) rotate(0deg) !important;
  }

  .moon-icon {
    opacity: 0;
    visibility: hidden;
    transform: translate(-50%, -50%) rotate(90deg) !important;
  }

  html.dark .sun-icon {
    opacity: 0;
    visibility: hidden;
    transform: translate(-50%, -50%) rotate(-90deg) !important;
  }

  html.dark .moon-icon {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) rotate(0deg) !important;
  }

  /* Spin animation */
  .theme-toggle.spin .sun-icon,
  .theme-toggle.spin .moon-icon {
    transition:
      opacity 0.2s ease,
      visibility 0.2s ease,
      transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  /* Theme transition overlay */
  .theme-transition {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: black;
    opacity: 0;
    pointer-events: none;
    z-index: 9999;
    transition: opacity 0.5s ease;
  }

  .theme-transition.fade-in {
    opacity: 0.15;
  }
</style>

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="Toggle theme"
  title="Toggle dark mode"
>
  <div class="theme-icons">
    <svg
      class="sun-icon"
      width="24"
      height="24"
      stroke-width="1.5"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
      <path d="M22 12L23 12" stroke-linecap="round" stroke-linejoin="round"
      ></path>
      <path d="M12 2V1" stroke-linecap="round" stroke-linejoin="round"></path>
      <path d="M12 23V22" stroke-linecap="round" stroke-linejoin="round"></path>
      <path d="M20 20L19 19" stroke-linecap="round" stroke-linejoin="round"
      ></path>
      <path d="M20 4L19 5" stroke-linecap="round" stroke-linejoin="round"
      ></path>
      <path d="M4 20L5 19" stroke-linecap="round" stroke-linejoin="round"
      ></path>
      <path d="M4 4L5 5" stroke-linecap="round" stroke-linejoin="round"></path>
      <path d="M1 12L2 12" stroke-linecap="round" stroke-linejoin="round"
      ></path>
    </svg>

    <svg
      class="moon-icon"
      width="24"
      height="24"
      stroke-width="1.5"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="12" cy="12" r="10" stroke-width="1.5"></circle>
      <path
        d="M7.63262 3.06689C8.98567 3.35733 9.99999 4.56025 9.99999 6.00007C9.99999 7.65693 8.65685 9.00007 6.99999 9.00007C5.4512 9.00007 4.17653 7.82641 4.01685 6.31997"
      ></path>
      <path
        d="M22 13.0505C21.3647 12.4022 20.4793 12 19.5 12C17.567 12 16 13.567 16 15.5C16 17.2632 17.3039 18.7219 19 18.9646"
      ></path>
      <path
        d="M14.5 8.51L14.51 8.49889"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
      <path
        d="M10 17C11.1046 17 12 16.1046 12 15C12 13.8954 11.1046 13 10 13C8.89543 13 8 13.8954 8 15C8 16.1046 8.89543 17 10 17Z"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </div>
</button>

<!-- Theme transition overlay -->
<div id="theme-transition" class="theme-transition"></div>

<script is:inline>
  // Add CSS transitions to the root element
  document.addEventListener("DOMContentLoaded", () => {
    document.documentElement.style.transition =
      "background-color 0.5s ease, color 0.5s ease";

    // Apply transitions to common elements
    const style = document.createElement("style");
    style.textContent = `
      * {
        transition: background-color 0.5s ease, border-color 0.5s ease, color 0.5s ease, fill 0.5s ease, stroke 0.5s ease;
      }
    `;
    document.head.appendChild(style);
  });

  // Theme toggle functionality
  function initTheme() {
    const root = document.documentElement;
    const themeToggle = document.getElementById("theme-toggle");
    const themeTransition = document.getElementById("theme-transition");

    // Check for existing theme preference in localStorage
    let darkMode = localStorage.getItem("theme") === "dark";

    // If no theme is set, check system preference
    if (!localStorage.getItem("theme")) {
      darkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
      localStorage.setItem("theme", darkMode ? "dark" : "light");
    }

    // Apply theme on page load
    if (darkMode) {
      root.classList.add("dark");
    } else {
      root.classList.remove("dark");
    }

    // Toggle theme on click
    themeToggle?.addEventListener("click", () => {
      // Add spin animation class
      themeToggle.classList.add("spin");

      // Start fade transition
      themeTransition.classList.add("fade-in");

      // Toggle dark mode with a slight delay
      setTimeout(() => {
        // Toggle dark mode
        darkMode = !darkMode;

        // Update DOM
        if (darkMode) {
          root.classList.add("dark");
        } else {
          root.classList.remove("dark");
        }

        // Store preference
        localStorage.setItem("theme", darkMode ? "dark" : "light");

        // End fade transition
        setTimeout(() => {
          themeTransition.classList.remove("fade-in");
        }, 300);
      }, 100);

      // Remove spin class after animation completes
      setTimeout(() => {
        themeToggle.classList.remove("spin");
      }, 500);
    });
  }

  // Run on load
  document.addEventListener("DOMContentLoaded", initTheme);

  // Also run immediately in case the script loads after DOMContentLoaded
  initTheme();

  // Handle Astro page transitions
  document.addEventListener("astro:page-load", initTheme);
  document.addEventListener("astro:after-swap", initTheme);
</script>
