---
/**
 * @fileoverview Button component that can render as either a button or anchor element.
 * Supports multiple variants and inherits all standard HTML button/anchor attributes.
 */

import type { ButtonProps } from "./types";
import "@/styles/components/button.css";

interface Props extends ButtonProps {}

const {
  id,
  href,
  variant = "black",
  ghostColour = "black",
  class: className,
  ...rest
} = Astro.props;

const baseStyles = "button";
const ghostColourStyles: Record<NonNullable<Props["ghostColour"]>, string> = {
  black:
    "border-black text-black hover:border-black dark:border-white dark:text-white dark:hover:border-white",
  purple:
    "border-purple text-purple hover:border-purple dark:border-purple-dark dark:text-purple-dark dark:hover:border-purple-dark",
  orange:
    "border-orange text-orange hover:border-orange dark:border-orange-dark dark:text-orange-dark dark:hover:border-orange-dark",
  green:
    "border-green text-green hover:border-green dark:border-green-dark dark:text-green-dark dark:hover:border-green-dark",
};
const variantStyles: Record<NonNullable<Props["variant"]>, string> = {
  black: "button--black",
  purple: "button--purple",
  orange: "button--orange",
  green: "button--green",
  ghost: `button--ghost ${ghostColourStyles[ghostColour]}`,
};
const combinedClasses = [baseStyles, variantStyles[variant], className]
  .filter(Boolean)
  .join(" ");
---

{
  href ? (
    <a href={href} class={combinedClasses} id={id} {...rest}>
      <slot />
    </a>
  ) : (
    <button class={combinedClasses} id={id} {...rest}>
      <slot />
    </button>
  )
}
