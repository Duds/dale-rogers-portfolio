---
/**
 * @fileoverview Button component that can render as either a button or anchor element.
 * Supports multiple variants and inherits all standard HTML button/anchor attributes.
 */

import type { ButtonProps } from "./types";

interface Props extends ButtonProps {}

const { href, variant = "primary", class: className, ...rest } = Astro.props;

const baseStyles = [
  "inline-flex items-center gap-2",
  "px-8 py-4",
  "text-xl font-medium",
  "rounded-pill",
  "transition-all duration-normal ease-in-out",
].join(" ");

const variantStyles: Record<NonNullable<Props["variant"]>, string> = {
  primary: [
    "bg-primary text-on-primary",
    "hover:bg-primary-hover hover:text-on-primary-hover",
    "hover:-translate-y-0.5",
    "shadow-md",
    "hover:shadow-lg",
    "dark:bg-primary-dark dark:text-on-primary-dark",
    "dark:hover:bg-primary-hover-dark dark:hover:text-on-primary-hover-dark",
  ].join(" "),
  secondary: "bg-button-secondary text-text hover:bg-button-secondary-hover",
  outline:
    "border-2 border-button-outline text-text hover:bg-button-outline-hover",
};

const combinedClasses = [baseStyles, variantStyles[variant], className]
  .filter(Boolean)
  .join(" ");
---

{
  href ? (
    <a href={href} class={combinedClasses} {...rest}>
      <slot />
    </a>
  ) : (
    <button class={combinedClasses} {...rest}>
      <slot />
    </button>
  )
}
