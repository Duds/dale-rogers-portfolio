---
import SpinningLogo from "./SpinningLogo.astro";

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // Remove the leading "/"

// Define active link class
const activeClass = "nav-link-active";

// Simplified nav items - only Case Studies and About
const navItems = [
  { label: "Case Studies", href: "/case-studies" },
  { label: "About", href: "/about" },
];
---

<nav
  id="main-nav"
  class="nav-base"
  role="navigation"
  aria-label="Main navigation"
>
  <div class="nav-container">
    <!-- Logo/Site Title -->
    <a href="/" class="nav-logo" aria-label="Dale Rogers - Home">
      Dale Rogers
    </a>

    <!-- Center Logo -->
    <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
      <SpinningLogo
        class="text-black hover:text-primary-purple transition-colors duration-500"
      />
    </div>

    <!-- Mobile Menu Button -->
    <button
      class="nav-mobile-menu"
      aria-label="Toggle menu"
      aria-expanded="false"
      aria-controls="navbar-menu"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex nav-links">
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class={`nav-link ${currentPath === item.href.slice(1) ? activeClass : ""}`}
          >
            {item.label}
          </a>
        ))
      }
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div
    id="navbar-menu"
    class="md:hidden hidden px-12 py-6 border-t border-black/10 bg-white/95"
    role="menu"
  >
    {
      navItems.map((item) => (
        <a
          href={item.href}
          class={`block py-3 nav-link ${currentPath === item.href.slice(1) ? activeClass : ""}`}
          role="menuitem"
        >
          {item.label}
        </a>
      ))
    }
  </div>
</nav>

<!-- Add padding to account for fixed navbar -->
<div class="h-[100px]"></div>

<script>
  // Mobile menu toggle functionality
  const menuButton = document.querySelector(
    'button[aria-controls="navbar-menu"]'
  );
  const menu = document.getElementById("navbar-menu");
  const navbar = document.getElementById("main-nav");

  menuButton?.addEventListener("click", () => {
    const isExpanded = menuButton.getAttribute("aria-expanded") === "true";
    menuButton.setAttribute("aria-expanded", String(!isExpanded));
    menu?.classList.toggle("hidden");
  });

  // Scroll functionality for navbar
  let lastScrollTop = 0;
  const scrollThreshold = 100; // Distance to scroll before hiding nav

  window.addEventListener(
    "scroll",
    () => {
      const currentScroll =
        window.pageYOffset || document.documentElement.scrollTop;

      // Add scrolled class when scrolling
      if (currentScroll > 0) {
        navbar?.classList.add("nav-scrolled");
      } else {
        navbar?.classList.remove("nav-scrolled");
      }

      // Check if past threshold for hiding
      if (currentScroll > scrollThreshold) {
        // Scrolling down
        if (currentScroll > lastScrollTop) {
          navbar?.classList.add("-translate-y-full");
        }
        // Scrolling up
        else {
          navbar?.classList.remove("-translate-y-full");
        }
      } else {
        // Always show navbar at the top of the page
        navbar?.classList.remove("-translate-y-full");
      }

      lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
    },
    false
  );
</script>
