---
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import SpinningLogo from "./SpinningLogo.astro";
import Container from "./Container.astro";

// Get current path and determine active page
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // Remove the leading "/"

// Define active link class
const activeClass = "nav-link-active";

// Simplified nav items - Removed Home as it's redundant with the logo
const navItems = [
  { label: "Case Studies", href: "/case-studies" },
  { label: "About", href: "/about" },
  { label: "Contact", href: "/contact" },
];
---

<nav
  id="main-nav"
  class="nav-base"
  role="navigation"
  aria-label="Main navigation"
>
  <Container padding="md">
    <div class="nav-container">
      <!-- Left Section -->
      <a href="/" class="nav-logo" aria-label="Dale Rogers - Home">
        Dale Rogers
      </a>

      <!-- Center Logo (flex container) -->
      <div class="flex-1 flex justify-center">
        <SpinningLogo
          class="text-black dark:text-white hover:text-primary-purple transition-colors duration-500 mx-4"
        />
      </div>

      <!-- Right Section -->
      <div class="hidden md:flex items-center gap-6">
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class={`nav-link ${item.href === "/" ? (pathname === "/" ? activeClass : "") : currentPath === item.href.slice(1) ? activeClass : ""}`}
            >
              {item.label}
            </a>
          ))
        }
        <ThemeToggle />
      </div>
    </div>
  </Container>

  <!-- Mobile Menu Button -->
  <button
    class="md:hidden nav-mobile-menu"
    aria-label="Toggle menu"
    aria-expanded="false"
    aria-controls="navbar-menu"
  >
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Mobile Navigation -->
  <div
    id="navbar-menu"
    class="md:hidden hidden px-12 py-6 border-t border-black/10 dark:border-white/10 bg-white/95 dark:bg-black/95"
    role="menu"
  >
    {
      navItems.map((item) => (
        <a
          href={item.href}
          class={`block py-3 nav-link ${item.href === "/" ? (pathname === "/" ? activeClass : "") : currentPath === item.href.slice(1) ? activeClass : ""}`}
          role="menuitem"
        >
          {item.label}
        </a>
      ))
    }
    <div class="py-3">
      <ThemeToggle />
    </div>
  </div>
</nav>

<!-- Add padding to account for fixed navbar -->
<div class="h-[100px]"></div>

<style>
  .nav-base {
    @apply fixed top-0 left-0 w-full z-50 transition-all duration-300;
  }

  .nav-container {
    @apply flex items-center justify-between py-8 relative;
  }

  .nav-logo {
    @apply font-heading text-4xl md:text-5xl hover:text-primary-purple transition-colors tracking-tight;
  }

  .nav-links {
    @apply items-center gap-6;
  }

  .nav-link {
    @apply font-heading text-xl md:text-2xl px-6 py-2 border-2
           text-gray-900 dark:text-white
           border-black dark:border-white
           hover:bg-black dark:hover:bg-white
           hover:text-white dark:hover:text-black
           rounded-full
           transition-all duration-300;
  }

  .nav-link-active {
    @apply bg-black dark:bg-white
           text-white dark:text-black
           shadow-button-hover;
  }

  .nav-scrolled {
    @apply bg-white/95 dark:bg-black/95 backdrop-blur-sm shadow-md;
  }

  .nav-mobile-menu {
    @apply p-2 rounded-full hover:bg-black/5 dark:hover:bg-white/5;
  }
</style>

<script>
  // Mobile menu toggle functionality
  const menuButton = document.querySelector(
    'button[aria-controls="navbar-menu"]'
  );
  const menu = document.getElementById("navbar-menu");
  const navbar = document.getElementById("main-nav");

  menuButton?.addEventListener("click", () => {
    const isExpanded = menuButton.getAttribute("aria-expanded") === "true";
    menuButton.setAttribute("aria-expanded", String(!isExpanded));
    menu?.classList.toggle("hidden");
  });

  // Scroll functionality for navbar
  let lastScrollTop = 0;
  const scrollThreshold = 100; // Distance to scroll before hiding nav

  window.addEventListener("scroll", () => {
    const currentScroll =
      window.pageYOffset || document.documentElement.scrollTop;

    // Add scrolled class when scrolling
    if (currentScroll > 0) {
      navbar?.classList.add("nav-scrolled");
    } else {
      navbar?.classList.remove("nav-scrolled");
    }

    // Check if past threshold for hiding
    if (currentScroll > scrollThreshold) {
      // Scrolling down
      if (currentScroll > lastScrollTop) {
        navbar?.classList.add("-translate-y-full");
      }
      // Scrolling up
      else {
        navbar?.classList.remove("-translate-y-full");
      }
    } else {
      // Always show navbar at the top of the page
      navbar?.classList.remove("-translate-y-full");
    }

    lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
  });
</script>
