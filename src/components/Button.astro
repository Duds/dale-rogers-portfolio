---
import type { HTMLAttributes } from "astro/types";

// Combine attributes for both <a> and <button>, excluding 'class'
// as Astro handles it specially.
interface BaseProps
  extends Omit<HTMLAttributes<"a"> & HTMLAttributes<"button">, "class"> {}

interface Props extends BaseProps {
  href?: string;
  variant?: "primary" | "secondary" | "outline";
  class?: string; // For Astro's class:list directive and standard class
}

const { href, variant = "primary", class: className, ...rest } = Astro.props;

const baseStyles =
  "inline-flex items-center justify-center px-6 py-3 rounded-[var(--radius-md)] font-medium transition-all duration-200 ease-in-out";
const variantStyles = {
  primary:
    "bg-[var(--colour-button-primary)] text-white hover:bg-[var(--colour-button-primary-hover)]",
  secondary:
    "bg-[var(--colour-button-secondary)] text-[var(--colour-text)] hover:bg-[var(--colour-button-secondary-hover)]",
  outline:
    "border-2 border-[var(--colour-button-outline)] text-[var(--colour-text)] hover:bg-[var(--colour-button-outline-hover)]",
};

const combinedClasses = [baseStyles, variantStyles[variant], className]
  .filter(Boolean)
  .join(" ");
---

{
  href ? (
    <a href={href} class={combinedClasses} {...rest}>
      <slot />
    </a>
  ) : (
    <button class={combinedClasses} {...rest}>
      <slot />
    </button>
  )
}
