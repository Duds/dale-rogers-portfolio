---
interface Props {
  href: string;
  variant?: "primary" | "secondary" | "outline";
  class?: string;
}

const { href, variant = "primary", class: className } = Astro.props;

const baseStyles =
  "inline-flex items-center justify-center px-6 py-3 rounded-[var(--radius-md)] font-medium transition-all duration-200 ease-in-out";
const variantStyles = {
  primary:
    "bg-[var(--colour-button-primary)] text-white hover:bg-[var(--colour-button-primary-hover)]",
  secondary:
    "bg-[var(--colour-button-secondary)] text-[var(--colour-text)] hover:bg-[var(--colour-button-secondary-hover)]",
  outline:
    "border-2 border-[var(--colour-button-outline)] text-[var(--colour-text)] hover:bg-[var(--colour-button-outline-hover)]",
};

const classes = [baseStyles, variantStyles[variant], className]
  .filter(Boolean)
  .join(" ");
---

<a href={href} class={classes}>
  <slot />
</a>

<style>
  .button-primary {
    display: inline-block;
    background-color: var(--colour-button-bg);
    color: var(--colour-button-text);
    padding: 0.75rem 1.75rem;
    font-size: 1rem;
    font-weight: 500;
    font-family: var(--font-body);
    border-radius: var(--radius-pill);
    box-shadow: 0 2px 6px var(--colour-shadow);
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .button-primary:hover {
    background-color: var(--colour-button-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--colour-shadow);
  }
</style>
