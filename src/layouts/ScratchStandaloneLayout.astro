---
interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

---
import { ArrowLeft } from 'lucide-astro';
---

<!doctype html>
<html lang="en-AU">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Mermaid Library -->
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"
    ></script>
    <script>
      /**
       * Mermaid API type
       * @typedef {Object} MermaidAPI
       * @property {(config: {
       *   startOnLoad?: boolean;
       *   theme?: string;
       *   securityLevel?: string;
       *   themeVariables?: Record<string, string>;
       * }) => void} initialize
       * @property {(options: { nodes: HTMLElement[]; suppressErrors: boolean }) => Promise<void>} run
       */
      /** @type {MermaidAPI} */
      const mermaid = window.mermaid;
      // @ts-ignore: Trusting Mermaid API shape at runtime

      // Initialize Mermaid
      mermaid.initialize({
        startOnLoad: true,
        theme: "default",
        securityLevel: "loose",
        themeVariables: {
          fontFamily: '"Poppins", sans-serif',
          fontSize: "14px",
          primaryColor: "#E0F2F1",
          primaryTextColor: "#004c45",
          primaryBorderColor: "#004c45",
          lineColor: "#00796B",
          secondaryColor: "#F5F5F5",
          tertiaryColor: "#B2DFDB",
          mainBkg: "#E0F2F1",
          nodeTextColor: "#004c45",
          clusterBkg: "#F5F5F5",
          clusterBorder: "#004c45",
          titleColor: "#004c45",
          edgeLabelBackground: "#ffffff",
          edgeLabelColor: "#004c45",
        },
      });

      // Run Mermaid on any existing diagrams
      const mermaidNodes = Array.from(
        document.querySelectorAll(".mermaid")
      ).filter((node): node is HTMLElement => node instanceof HTMLElement);

      if (mermaidNodes.length > 0) {
        mermaid.run({
          nodes: mermaidNodes,
          suppressErrors: true,
        });
      }
    </script>

    <!-- Theme initialization script -->
    <script is:inline>
      // Initialize theme from localStorage or system preference
      (function () {
        const THEME_KEY = "theme";
        const stored = localStorage.getItem(THEME_KEY);
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        const theme =
          stored === "dark" || stored === "light"
            ? stored
            : prefersDark
              ? "dark"
              : "light";

        document.documentElement.classList.toggle("dark", theme === "dark");
      })();
    </script>
  </head>
  <body
    class="font-body text-grey-900 dark:text-white bg-white dark:bg-grey-900 min-h-screen"
  >
    <!-- Back to portfolio button -->
    <div class="fixed top-4 right-4 z-50">
      <a
        href="/scratch"
        class="inline-flex items-center gap-2 px-4 py-2 bg-white dark:bg-grey-800 text-grey-700 dark:text-grey-300 border border-grey-300 dark:border-grey-600 rounded-lg hover:bg-grey-50 dark:hover:bg-grey-700 transition-colors text-sm font-medium shadow-lg"
      >
        <ArrowLeft class="w-5 h-5" />
        Back to Portfolio
      </a>
    </div>

    <main>
      <slot />
    </main>
  </body>
</html>

<style is:global>
  /* Import global styles */
  @import "@/styles/global.css";
</style>
