---
import BaseLayout from "./BaseLayout.astro";
import Container from "@/components/layout/Container.astro";
import { type CollectionEntry } from "astro:content";
import TagList from "@/components/ui/TagList.astro";
import FormattedDate from "@/components/ui/FormattedDate.astro";

interface Props {
  scratch: CollectionEntry<"scratch">;
  title: string;
  description: string;
  showNavigation?: boolean;
}

const { scratch } = Astro.props;
const {
  title: scratchTitle,
  pubDate,
  tags,
  coverImage,
  status,
  author,
} = scratch.data;

const { title: propsTitle, description: propsDescription } = Astro.props;
---

<BaseLayout
  title={propsTitle}
  description={propsDescription}
  image={coverImage}
>
  <Container>
    <article class="prose prose-lg dark:prose-invert mx-auto">
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{scratchTitle}</h1>
        <div
          class="flex items-center gap-4 text-gray-600 dark:text-gray-400 mb-4"
        >
          <FormattedDate date={pubDate} />
          <span>by {author}</span>
          {
            status && (
              <span
                class={`px-3 py-1 rounded-full text-sm ${
                  status === "in-progress"
                    ? "bg-yellow-100 text-yellow-800"
                    : status === "complete"
                      ? "bg-green-100 text-green-800"
                      : status === "abandoned"
                        ? "bg-red-100 text-red-800"
                        : "bg-gray-100 text-gray-800"
                }`}
              >
                {status.charAt(0).toUpperCase() + status.slice(1)}
              </span>
            )
          }
        </div>
        {tags && <TagList tags={tags} class="mb-6" />}
      </header>

      {
        coverImage && (
          <img
            src={coverImage}
            alt={scratchTitle}
            class="w-full h-[400px] object-cover rounded-lg mb-8"
          />
        )
      }

      <div class="scratch-content">
        <slot />
      </div>
    </article>
  </Container>
</BaseLayout>

<style>
  @reference "tailwindcss";

  .scratch-content :global(img) {
    @apply rounded-lg my-8;
  }

  .scratch-content :global(blockquote) {
    @apply border-l-4 border-blue-500 pl-4 italic my-8;
  }

  .scratch-content :global(pre) {
    @apply p-4 rounded-lg overflow-x-auto my-8;
  }

  .scratch-content :global(h2) {
    @apply mt-12 mb-6;
  }

  .scratch-content :global(h3) {
    @apply mt-8 mb-4;
  }

  .scratch-content :global(p) {
    @apply mb-6 leading-relaxed;
  }

  .scratch-content :global(ul) {
    @apply list-disc list-inside mb-6;
  }

  .scratch-content :global(ol) {
    @apply list-decimal list-inside mb-6;
  }

  .scratch-content :global(a) {
    @apply text-blue-500 hover:underline;
  }
</style>

<script>
  // Add Heading components to content headings
  document.addEventListener("DOMContentLoaded", () => {
    const content = document.querySelector(".scratch-content");
    if (!content) return;

    // Replace h2 elements with Heading components
    content.querySelectorAll("h2").forEach((h2) => {
      const heading = document.createElement("astro-heading");
      heading.setAttribute("level", "2");
      heading.setAttribute("font", "inter");
      heading.setAttribute("size", "2xl");
      heading.innerHTML = h2.innerHTML;
      h2.replaceWith(heading);
    });

    // Replace h3 elements with Heading components
    content.querySelectorAll("h3").forEach((h3) => {
      const heading = document.createElement("astro-heading");
      heading.setAttribute("level", "3");
      heading.setAttribute("font", "inter");
      heading.setAttribute("size", "3xl");
      heading.innerHTML = h3.innerHTML;
      h3.replaceWith(heading);
    });
  });
</script>
