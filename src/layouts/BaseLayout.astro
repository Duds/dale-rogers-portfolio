---
import { ViewTransitions } from 'astro:transitions';
import Header from '@/components/layout/Header.astro';
import Footer from '@/components/layout/Footer.astro';
import '@/styles/global.css';

interface Props {
  title: string;
  description?: string;
  image?: string;
  canonicalURL?: string;
}

const {
  title,
  description = 'Dale Rogers - Service Designer and Digital Strategist',
  image = '/images/og-image.jpg',
  canonicalURL = Astro.url,
} = Astro.props;

// Environment detection
const isDev = import.meta.env.DEV;
const hostname = Astro.url.hostname;

// More robust environment detection
const isPreview = hostname.includes('preview') || hostname.includes('preview.westeurope');
const isProduction =
  hostname.includes('wonderful-pond-07724bc03.1.azurestaticapps.net') &&
  !hostname.includes('preview');

// Use ASTRO_ENVIRONMENT as fallback if hostname detection fails
const astroEnv = import.meta.env.ASTRO_ENVIRONMENT;

// Debug logging for environment detection
console.log('üîç BaseLayout Environment Detection:', {
  hostname,
  isDev,
  isPreview,
  isProduction,
  ASTRO_ENVIRONMENT: astroEnv,
});

// Environment detection with fallback to ASTRO_ENVIRONMENT
let environment = 'unknown';
if (isDev) {
  environment = 'development';
} else if (isPreview) {
  environment = 'preview';
} else if (isProduction) {
  environment = 'production';
} else if (astroEnv) {
  // Fallback to build-time environment variable
  environment = astroEnv;
}

// Version information
const version = '1.1.0';
const buildTime = new Date().toISOString();
const deployment =
  environment === 'development'
    ? 'local'
    : environment === 'preview'
      ? 'azure-preview'
      : environment === 'production'
        ? 'azure-production'
        : 'unknown';

// Get commit hash from environment or use fallback
const commitHash = import.meta.env.ASTRO_COMMIT_HASH || 'local';
const branch = import.meta.env.ASTRO_BRANCH || (isDev ? 'dev' : isPreview ? 'preview' : 'main');
---

<!doctype html>
<html lang="en-AU">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <!-- Version Information -->
    <meta name="version" content={version} />
    <meta name="build-time" content={buildTime} />
    <meta name="environment" content={environment} />
    <meta name="deployment" content={deployment} />
    <meta name="commit-hash" content={commitHash} />
    <meta name="branch" content={branch} />

    <!-- Version Display Script -->
    <script is:inline>
      // Display version information in console and optionally in UI
      const versionInfo = {
        version: '{version}',
        buildTime: '{buildTime}',
        environment: '{environment}',
        deployment: '{deployment}',
        commitHash: '{commitHash}',
        branch: '{branch}',
        url: window.location.href,
        userAgent: navigator.userAgent,
      };

      console.log('üöÄ Portfolio Version Info:', versionInfo);

      // Add version info to window for debugging
      window.portfolioVersion = versionInfo;
    </script>

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Use the new dark mode utility as early as possible -->
    <script is:inline>
      // Initialize theme from localStorage or system preference
      function initializeTheme() {
        const THEME_KEY = 'theme';
        const stored = localStorage.getItem(THEME_KEY);
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme =
          stored === 'dark' || stored === 'light' ? stored : prefersDark ? 'dark' : 'light';

        // Set data-theme attribute instead of class
        document.documentElement.setAttribute('data-theme', theme);
        // Also set the class for Tailwind compatibility
        document.documentElement.classList.toggle('dark', theme === 'dark');

        // Log for debugging
        console.log('üé® BaseLayout: Theme initialized to:', theme);
        console.log('üé® BaseLayout: localStorage theme:', stored);
        console.log('üé® BaseLayout: System prefers dark:', prefersDark);

        // Dispatch a custom event to notify other scripts that theme is ready
        document.dispatchEvent(new CustomEvent('theme:initialized', { detail: { theme } }));
      }

      // Run immediately if DOM is ready, otherwise wait
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeTheme);
      } else {
        initializeTheme();
      }
    </script>

    <ViewTransitions />
  </head>
  <body
    class="font-body text-gray-900 min-h-screen flex flex-col"
    style="background-color: var(--color-background-primary); color: var(--color-text-primary);"
  >
    <Header />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />
  </body>
</html>
