{
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "XXX",
    "[ ]",
    "[x]"
  ],
  "todo-tree.highlights.customHighlight": {
    "TODO": {
      "icon": "check",
      "type": "line",
      "foreground": "#ffa500",
      "background": "#ffa50020"
    },
    "FIXME": {
      "icon": "bug",
      "type": "line",
      "foreground": "#ff0000",
      "background": "#ff000020"
    },
    "[ ]": {
      "icon": "circle-outline",
      "type": "line",
      "foreground": "#808080",
      "background": "#80808020"
    },
    "[x]": {
      "icon": "check-circle",
      "type": "line",
      "foreground": "#00ff00",
      "background": "#00ff0020"
    }
  },
  "todo-tree.tree.showScanModeButton": true,
  "todo-tree.tree.showCountsInTree": true,
  "todo-tree.tree.hideTreeWhenEmpty": false,
  "todo-tree.filtering.excludeGlobs": [
    "**/node_modules/**",
    "**/dist/**",
    "**/.git/**",
    "**/TEMP_MARKDOWN_FILES/**"
  ],
  "todo-tree.tree.showInExplorer": true,
  "todo-tree.tree.showInActivityBar": true,
  "todo-tree.tree.showInStatusBar": true,
  "todo-tree.tree.showInPanel": true,
  "todo-tree.tree.showInView": true,
  "todo-tree.tree.view": "default",
  "todo-tree.tree.defaultView": "default",
  "todo-tree.tree.views": {
    "default": {
      "name": "Todo Tree",
      "visibility": "visible"
    }
  },
  "cSpell.language": "en-AU",
  "cSpell.allowCompoundWords": true,
  "cSpell.words": [
    "behaviour",
    "centre",
    "colour",
    "customisation",
    "customise",
    "localisation",
    "optimisation",
    "optimise",
    "organisation",
    "sanitisation",
    "Astro",
    "Canberra",
    "Fraunces",
    "Nodemailer",
    "prerendered",
    "rgba",
    "SMTP",
    "Tailwind",
    "Umami",
    "typecheck",
    "typescriptreact"
  ],
  "cSpell.ignoreRegExpList": [
    "from\\s+['\"].*['\"]",
    "https?://[^\\s>]*",
    "--[a-zA-Z0-9-]+",
    "[a-z]+[A-Z][a-zA-Z]*"
  ],
  "cSpell.enableFiletypes": [
    "astro",
    "javascript",
    "javascriptreact",
    "json",
    "markdown",
    "plaintext",
    "typescript",
    "typescriptreact",
    "yml"
  ],
  "cSpell.ignorePaths": [
    "node_modules",
    "dist",
    ".git",
    "pnpm-lock.yaml",
    "package-lock.json"
  ],
  "cSpell.flagWords": [
    "behavior",
    "center",
    "color",
    "customize",
    "customization",
    "localization",
    "optimize",
    "optimization",
    "organize",
    "organization",
    "sanitization"
  ],
  "npm.packageManager": "npm",
  "ai.customInstructions": "# ðŸ§  Cursor Agent AI Ruleset\n\nYou are the code-generating agent inside the Cursor IDE. You implement logic, write APIs, configure state, and debug errors across four standalone Next.js apps in the `dale-labs` monorepo.\n\n## Role\n- Implement UI behaviour, API routes, DB logic, hooks, and reusable utilities\n- Wire up Vercel v0-generated component shells\n- Maintain alignment with app-specific architecture\n- Write tests for all meaningful logic (unit via Jest, integration via Playwright)\n\n## File & Modularity Rules\n- Use one export per file\n- File names must describe purpose (e.g. `UserCard.tsx`, `useFormValidation.ts`)\n- Never assume shared config â€” apps are fully isolated\n- Use `.test.ts` or `.spec.ts` naming for test files\n- Never use `index.ts` for core modules unless scoped within folders\n\n## GitHub MCP Integration\n- Use GitHub MCP server for all GitHub operations\n- Follow issue/PR templates from `.cursor/rules/github-workflow.mdc`\n- Auto-create issues from TODOs with proper formatting\n- Link PRs to issues using `Fixes #issue_number`\n- Use conventional commit messages\n- Maintain documentation with changes\n\n## Documentation Command\nWhen you receive the command \"update-docs\" or similar variations, you should:\n1. Update CHANGELOG.md with latest features, changes, and fixes\n2. Update DECISIONS.md with new architectural and design decisions\n3. Update DEVELOPMENT.md with new development guidelines and practices\n4. Update LESSONS_LEARNED.md with new insights and learnings\n5. Update TODO.md with new tasks and priorities\n6. Update README.md if needed\n7. Create a well-formatted commit message\n8. Push the changes to the current branch on GitHub\n\n## Language & Stack Rules\n- All code must use TypeScript\n- Tailwind must follow per-app theming\n- ORM = Prisma, DB = Neon Postgres\n- Auth = Clerk with roles\n- Apply consistent linting/formatting via ESLint + Prettier\n\n## Test + Dev Flow\n- Run apps with:\n  ```bash\n  pnpm exec next dev --turbo=false --port={PORT} --filter={APP}\n  ```",
  "editor.defaultFormatter": "astro-build.astro-vscode",
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode"
  },
  "task.allowAutomaticTasks": "on",
  "files.associations": {
    "*.mcp.json": "jsonc"
  },
  "cursor.mcp.enabled": true,
  "problems.excludePatterns": [
    "**/node_modules/**",
    "**/dist/**",
    "**/.git/**",
    "**/TEMP_MARKDOWN_FILES/**"
  ],
  "[mdx]": {
    "editor.formatOnSave": false
  }
}
